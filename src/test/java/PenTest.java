import com.a1qa.pen.Pen;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertTrue;

/**
 * Created by v.demyanova on 4/29/17.
 */
public class PenTest {


    private static final int DEFAUL_CONTEINER=1000;
    private static final double DEFAULT_SIZE=1.0;
    private static final String CONTAINER_FIELD="inkContainerValue";
    private static final String SIZE_LETTER_FIELD="sizeLetter";
    private static final String COLOR_FIELD="color";



    @Test (dataProvider = "container")
    public void testPenConstructor_toInitContainer(String key,Integer val) throws NoSuchFieldException, IllegalAccessException {

        Pen pen = new Pen(val);
        Field f = pen.getClass().getDeclaredField(CONTAINER_FIELD);
        f.setAccessible(true);
        Integer value=1;
            value = Integer.valueOf(f.get(pen).toString());

        Assert.assertEquals(value,val);

    }
    @Test (dataProvider = "sizeLetter")
    public void testPenConstructor_toInitSizeLetter(String key,Double val) throws NoSuchFieldException, IllegalAccessException {

        Pen pen = new Pen(1000);
        Field f = pen.getClass().getDeclaredField(SIZE_LETTER_FIELD);
        f.setAccessible(true);
        Double value = Double.valueOf(f.get(pen).toString());
        Assert.assertEquals(value,val);

    }


    @Test (dataProvider = "color")
    public void testPenConstructor_toInitColor(String key,String val) throws NoSuchFieldException, IllegalAccessException {

        Pen pen = new Pen(1000, 1.0, val);
        Field f  = pen.getClass().getDeclaredField(COLOR_FIELD);
        f.setAccessible(true);
        String value = f.get(pen).toString();
        Assert.assertEquals(value,val);

    }


    @Test(dataProvider = "color")
    public void testPenGetColor_getRightColor(String key,String val) {
        Pen pen = new Pen(DEFAUL_CONTEINER, DEFAULT_SIZE, val);
        Assert.assertEquals(pen.getColor().toUpperCase(),val.toUpperCase());
    }


    @Test
    public void testPenIsWork_shouldWorkValPolog() {
        Pen pen = new Pen(1000);
        Assert.assertTrue(pen.isWork(),"true");
    }

    @Test
    public void testPenIsWork_shouldNotWorkValGran() {
        Pen pen = new Pen(0);
        Assert.assertFalse(pen.isWork(),"true");
    }

    @Test
    public void testPenIsWork_shouldWorkValOtric() {
        Pen pen = new Pen(-10);
        assertTrue(true==pen.isWork());
    }




    @Test
    public void testPenWrite_getFullWrittWordGran() {
        Pen pen = new Pen(100, 20.0);
        assertTrue("qwert".equals(pen.write("qwert")));
    }

    @Test
    public void testPenWrite_notGetFullWrittWordMiddle() {
        Pen pen = new Pen(100, 20.0);
        assertFalse("qwerty".equals(pen.write("qwerty")));
    }

    @Test
    public void testPenWrite_shouldNotGetFullWord() {
        Pen pen = new Pen(100, 0.0);
        String w = pen.write("qwert");
        Assert.assertNotEquals(w,"qwert");
    }

    @Test
    public void testGetPartOfWord() {

        Pen pen = new Pen(80, 20.0, "blue");
        assertFalse(pen.write("qwert").equals("qwer"));

    }

    @Test
    public void testGetEmptyString() {

        Pen pen = new Pen(0, 20.0, "blue");
        assertTrue(pen.write("qwert").isEmpty());

    }

    @Test
    public void testPrintRightColor() throws IOException {
        Pen pen = new Pen(80, 20.0, "red");
        File file = new File("resources\\temp.txt"); //  создаем файл
        PrintStream ps = null; // создаем поток вывода в файл
            ps = new PrintStream(file);
        PrintStream standardOut = System.out; // сохраняем стандартный поток вывода
        System.setOut(ps); // присваиваем файловый поток в качестве основного
        pen.doSomethingElse(); // вызываем метод
            Assert.assertEquals(Files.readAllLines(Paths.get(file.toURI())).get(0), pen.getColor()); // проверяем что результат в файле равен ожидаемому

        System.setOut(standardOut); // возвращаем метод в исходное состояние

    }



    @DataProvider(name = "test1")
    public Object[][] createData1() {
        return new Object[][] {
                { "Cedric", new Integer(36) },
                { "Anne", new Integer(37)},
        };
    }

    @DataProvider(name = "color")
    public Object[][] createData2() {
        return new Object[][] {
                { "blue", "blue" },
                { "red", "red"},
                { "yellow", "yellow"},


        };
    }

    @DataProvider(name = "container")
    public Object[][] createData3() {
        return new Object[][] {
                { "", new Integer(1000) },
                {  "", new Integer(0)},
                {  "", new Integer(-10)},


        };
    }

    @DataProvider(name = "sizeLetter")
    public Object[][] createData4() {
        return new Object[][] {
                { "", new Double(1.0) },
                {  "", new Double(1)},
                {  "", new Double(0)},
                {  "", new Double(-1.5)},


        };
    }

    //This test method declares that its data should be supplied by the Data Provider
//named "test1"
    @Test(dataProvider = "test1")
    public void verifyData1(String n1, Integer n2) {
        System.out.println(n1+" "+n2);
    }


}
